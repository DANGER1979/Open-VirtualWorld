//Для школы вождения начало
//vw_PDDExam
new gTakingLesson[MAX_PLAYERS];//!!!не переводить на PVar

new DriveProgress[MAX_PLAYERS];//для чекпоинтов и школы
new Float:DriveSost[MAX_PLAYERS];
//Для школы вождения конец
new LessonCar[3];


/*#define MAX_POLIGON_OBJECTS 134
enum pol_object_info
{
	bool: oShow,//false -если объект ставится в процессе игры,true - если объект сразу установлен при запуске мода
	oModel,
	Float:oX,
	Float:oY,
	Float:oZ,
	Float:orX,
	Float:orY,
	Float:orZ
}
new PoligonObjects[MAX_POLIGON_OBJECTS][pol_object_info] = {//77	//32//32	//134
//Для школы вождения начало
//ПОЛИГОН 134 координаты бочек на полигоне
{false, 1225, -2047.739380, -124.699600, 34.675339, 0.0, 0.0, 0.0},//0
{false, 1225, -2047.828735, -127.508087, 34.685390, 0.0, 0.0, 0.0},
{false, 1225, -2047.975708, -131.667175, 34.698689, 0.0, 0.0, 0.0},
{false, 1225, -2047.973022, -136.163910, 34.721497, 0.0, 0.0, 0.0},
{false, 1225, -2047.925659, -139.214722, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2047.908203, -141.976624, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2047.887329, -144.973816, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2047.729858, -148.626572, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2047.702393, -152.689362, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2047.698242, -157.703888, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2045.846924, -160.790421, 34.726067, 0.0, 0.0, 0.0},//10
{false, 1225, -2043.227295, -162.861053, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2040.600098, -162.904633, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2037.797485, -163.111908, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2034.899170, -162.867844, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2031.852295, -163.106583, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2029.787598, -165.264786, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.985352, -166.907516, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.733643, -170.627853, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.643677, -174.075684, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.636963, -178.923584, 34.726067, 0.0, 0.0, 0.0},//20
{false, 1225, -2027.671143, -183.302338, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.617920, -186.658890, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.563721, -191.181686, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2027.580078, -195.068634, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2029.627197, -196.768021, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2032.301880, -196.650391, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2035.021729, -196.580505, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2037.809937, -196.429749, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2039.987305, -195.957809, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2043.569214, -195.811615, 34.726067, 0.0, 0.0, 0.0},//30
{false, 1225, -2045.273193, -198.124237, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2047.288330, -200.983261, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2049.360107, -203.673172, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2052.088623, -206.996796, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2053.906738, -209.363663, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2054.351563, -211.975128, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2054.267090, -214.795746, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2054.124268, -217.791809, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2055.906250, -219.694305, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2057.633545, -219.397446, 34.726067, 0.0, 0.0, 0.0},//40
{false, 1225, -2058.626953, -217.816498, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.747559, -215.103271, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.573486, -211.342789, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.686035, -208.026291, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.655762, -204.211914, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.548828, -199.790741, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.497314, -194.988190, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.647949, -189.953400, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.572266, -184.511627, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.516357, -179.578522, 34.726067, 0.0, 0.0, 0.0},//50
{false, 1225, -2058.537598, -174.580582, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.625977, -169.239868, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.639404, -163.440292, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.717041, -158.009964, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.677490, -153.811859, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.600098, -148.967178, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2058.447998, -144.551208, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2058.364014, -139.715439, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.335449, -136.523911, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2058.574219, -133.029388, 34.726067, 0.0, 0.0, 0.0},//60
{false, 1225, -2060.240967, -130.847961, 34.730694, 0.0, 0.0, 0.0},
{false, 1225, -2062.932861, -129.208313, 34.731895, 0.0, 0.0, 0.0},
{false, 1225, -2065.347168, -128.650375, 34.732307, 0.0, 0.0, 0.0},
{false, 1225, -2067.585205, -128.456207, 34.732227, 0.0, 0.0, 0.0},
{false, 1225, -2067.923828, -125.978699, 34.734264, 0.0, 0.0, 0.0},
{false, 1225, -2067.055176, -123.778641, 34.735874, 0.0, 0.0, 0.0},
{false, 1225, -2064.495850, -123.390129, 34.733089, 0.0, 0.0, 0.0},
{false, 1225, -2062.125977, -123.011520, 34.731354, 0.0, 0.0, 0.0},
{false, 1225, -2060.723633, -120.962669, 34.730324, 0.0, 0.0, 0.0},
{false, 1225, -2060.789063, -116.457222, 34.730373, 0.0, 0.0, 0.0},//70
{false, 1225, -2042.614014, -124.766006, 34.651779, 0.0, 0.0, 0.0},
{false, 1225, -2042.276733, -128.329132, 34.663055, 0.0, 0.0, 0.0},
{false, 1225, -2042.025024, -132.687607, 34.681007, 0.0, 0.0, 0.0},
{false, 1225, -2041.642700, -137.868835, 34.717808, 0.0, 0.0, 0.0},
{false, 1225, -2041.426880, -141.111725, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2041.288574, -143.401657, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2041.016602, -147.020721, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2040.770386, -150.297256, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2040.692505, -153.235474, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2039.353027, -154.612793, 34.726067, 0.0, 0.0, 0.0},//80
{false, 1225, -2036.316528, -154.779053, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2033.045776, -154.687347, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2029.543579, -156.997269, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2026.646118, -159.627060, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2023.610718, -163.053543, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2021.614014, -166.409607, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2021.167114, -169.434769, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2020.853638, -173.505859, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2020.595337, -178.758606, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2020.436035, -184.067459, 34.726067, 0.0, 0.0, 0.0},//90
{false, 1225, -2020.353882, -187.446762, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2020.294189, -190.886353, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2020.032837, -195.188446, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2019.900024, -199.928207, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2023.939331, -201.555603, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2028.125977, -202.197342, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2032.997314, -202.245728, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2038.529907, -202.236694, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2041.955811, -204.437988, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2043.894287, -206.880768, 34.726067, 0.0, 0.0, 0.0},//100
{false, 1225, -2046.462891, -209.915741, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2047.820313, -213.071594, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2048.056885, -216.837219, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2048.151855, -220.537430, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2050.383545, -222.960617, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2053.129395, -224.293259, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2056.260986, -225.874878, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2059.005371, -225.500443, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2061.224121, -224.122742, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2063.714111, -221.460449, 34.726067, 0.0, 0.0, 0.0},//110
{false, 1225, -2064.190430, -217.112183, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2064.535400, -212.231552, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2064.851318, -206.732819, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2065.049316, -202.883667, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2065.298584, -197.836700, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2065.397949, -193.946503, 34.837078, 0.0, 0.0, 0.0},
{false, 1225, -2065.649658, -188.854095, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2065.890137, -182.918167, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2066.158203, -176.039978, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2066.401367, -168.610062, 34.726067, 0.0, 0.0, 0.0},//120
{false, 1225, -2066.095947, -162.975357, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2066.087158, -157.294281, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2066.281006, -151.829300, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2066.358887, -146.058899, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2066.005859, -139.813278, 34.733147, 0.0, 0.0, 0.0},
{false, 1225, -2065.747559, -136.000671, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2067.414795, -133.682510, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2070.273438, -132.213989, 34.726067, 0.0, 0.0, 0.0},
{false, 1225, -2072.827393, -129.196564, 34.730789, 0.0, 0.0, 0.0},
{false, 1225, -2072.656494, -125.322281, 34.733643, 0.0, 0.0, 0.0},
{false, 1225, -2070.666016, -121.036743, 34.736496, 0.0, 0.0, 0.0},
{false, 1225, -2067.880371, -119.043213, 34.766632, 0.0, 0.0, 0.0},
{false, 1225, -2064.679199, -116.779121, 34.733040, 0.0, 0.0, 0.0}//133
};*/
//Для школы вождения конец

#define MAX_POINT 74    //7+67=74	//69=62+7 //7+47=54
new Float:DriveSchool[MAX_POINT][4] = {// координаты контрольных отметок для школы вождения
{0.0,0.0,0.0,0.0},//0 STEP0
{-2044.9919,-124.4210,35.2512,5.0},//1 автодром
{-2038.2026,-158.7783,35.3203,5.0},//2 автодром
{-2053.4741,-221.0357,35.3203,5.0},//3 автодром
{-2062.4063,-132.5683,35.3203,5.0},//4 автодром
{-2065.4836,-120.8585,35.3281,5.0},//5 автодром
{-2046.9509,-108.9741,35.2404,5.0},//6 автодром
//Далее для улицы
{-2047.0104,-84.0242,35.0323,5.0}, //
{-2068.3467,-67.8431,35.0469,5.0}, //
{-2084.8630,-57.1790,35.0918,5.0}, //
{-2074.2705,27.3068,35.0469,5.0}, //
{-2003.3179,41.5622,32.2450,5.0}, //
{-2019.7183,110.8436,27.5458,5.0}, //
{-2150.3027,123.3156,35.0469,5.0}, //
{-2159.7139,210.7049,35.0469,5.0}, //
{-2248.7588,221.1688,35.0391,5.0}, //
{-2238.8638,317.9177,35.0469,5.0}, //
{-2144.2527,333.3663,35.0469,5.0}, //
{-2138.7371,517.6026,34.8907,5.0}, //
{-2159.6506,569.5146,34.8906,5.0}, //
{-2252.3845,581.4139,35.3916,5.0}, //
{-2282.3892,670.7374,48.8147,5.0}, //
{-2383.1045,681.3198,34.8906,5.0},//
{-2402.2219,710.6960,34.8906,5.0}, //
{-2458.1799,721.5548,34.8923,5.0}, //
{-2492.9756,752.3271,35.0469,5.0}, //
{-2469.1660,785.5721,35.0468,5.0}, //
{-2481.0645,811.0588,35.3422,5.0}, //
{-2524.2971,821.2127,49.7031,5.0}, //
{-2513.7629,905.9604,64.7318,5.0}, //
{-2382.9604,921.0668,45.1719,5.0}, //
{-2401.9041,957.8765,45.1742,5.0}, //
{-2407.9756,976.6420,45.1719,5.0}, //
{-2390.6030,1077.3069,55.4531,5.0}, //
{-2293.6301,1051.5114,55.4531,5.0}, //
{-1997.6617,1065.6665,55.4452,5.0},//
{-2018.8478,1080.3987,55.4453,5.0}, //
{-2293.5173,1079.9735,55.4531,5.0}, //
{-2353.9619,1105.4225,55.4531,5.0}, //
{-2603.1030,1142.9254,55.3047,5.0}, //
{-2646.2905,1204.5183,55.1460,5.0}, //
{-2560.3032,1192.8987,45.6314,5.0}, //
{-2457.2646,1198.5535,34.9316,5.0}, //
{-2352.8008,1172.5171,41.9132,5.0}, //
{-2269.4419,1156.9064,57.9254,5.0}, //
{-2240.0432,1090.9973,79.7266,5.0}, //
{-2147.3892,1080.0154,79.7217,5.0}, //
{-2147.2146,1007.9133,79.7266,5.0}, //
{-2147.5271,905.3132,79.7266,5.0}, //
{-2147.4253,795.7795,69.2891,5.0}, //
{-2147.3533,718.2087,69.2891,5.0}, //
{-2147.1782,550.4460,34.8906,5.0}, //
{-2159.8887,507.3928,34.8906,5.0}, //
{-2239.7063,510.8878,34.8906,5.0}, //
{-2387.5161,506.2552,28.9378,5.0}, //
{-2545.1409,410.3673,21.7933,5.0}, //
{-2609.1252,375.5989,6.9252,5.0}, //
{-2609.8213,315.1328,4.0597,5.0}, //
{-2660.0964,290.8912,4.0547,5.0}, //
{-2708.5747,275.3196,4.0547,5.0}, //
{-2708.5715,204.7455,4.0547,5.0}, //
{-2708.5896,144.7321,4.0547,5.0}, //
{-2708.5903,72.0114,4.0547,5.0}, //
{-2693.7080,37.0900,4.0547,5.0}, //
{-2591.4780,37.2429,4.0590,5.0}, //
{-2488.6191,37.2752,26.0595,5.0}, //
{-2423.6675,26.7562,34.9101,5.0}, //
{-2408.1355,-72.6600,35.0391,5.0}, //
{-2358.9597,-72.6605,35.0391,5.0}, //
{-2239.1118,-73.1229,35.0469,5.0},//
{-2153.9521,-72.7658,35.0469,5.0}, //
{-2074.2883,-72.7204,35.0469,5.0}, //
{-2047.0111,-83.2415,35.0391,5.0}, //
{-2046.9996,-97.7120,35.0429,5.0} //
};//stopTest
//Для школы вождения конец


#define MAX_QUESTIONS 47
#define MAX_SIZE_QUESTIONS 212//167
new list_questions[MAX_PLAYERS][10];//должен заполняться от 1 до MAX_QUESTIONS включительно
new IncorrectCounter[MAX_PLAYERS];
enum examinfo
{
	ex_article,//номер вопроса
	ex_part,//номер ответа
	ex_question[66],//вопрос
	ex_answer[70],//ответ
	ex_correct//1 - правильный ответ,  0 - неправильный
};
new PDD_Exam[MAX_SIZE_QUESTIONS][examinfo] = {
{1,1, "В каком случае водитель совершил вынужденную остановку?", "Остановился перед пешеходным переходом, уступая дорогу пешеходу\n",0},
{1,2, "В каком случае водитель совершил вынужденную остановку?", "Остановился у тротуара из-за технической неисправности автомобиля\n",1},
{1,3, "В каком случае водитель совершил вынужденную остановку?", "В обоих перечисленных случаях\n",0},
{2,1, "Является ли пересечение дороги с трамвайными путями ЖД переездом?", "Является\n",0},
{2,2, "Является ли пересечение дороги с трамвайными путями ЖД переездом?", "Не является\n",1},
{2,3, "Является ли пересечение дороги с трамвайными путями ЖД переездом?", "В зависимости от обстановки\n",0},
{3,1, "С какой стороны разрешён обгон?", "Разрешён с правой стороны\n",0},
{3,2, "С какой стороны разрешён обгон?", "Разрешён с левой стороны\n",1},
{3,3, "С какой стороны разрешён обгон?", "Как с правой, так и с левой стороны\n",0},
{4,1, "Какой ответ соответствует термину Механическое ТС?", "ТС, предназначенное для перевозки людей и грузов\n",0},
{4,2, "Какой ответ соответствует термину Механическое ТС?", "ТС, оборудованное двигателем внутреннего сгорания\n",0},
{4,3, "Какой ответ соответствует термину Механическое ТС?", "ТС, приводимое в движение двигателем\n",1},
{5,1, "Что не относится к термину механическое ТС?", "Трактор\n",0},
{5,2, "Что не относится к термину Механическое ТС?", "Трамвай\n",0},
{5,3, "Что не относится к термину Механическое ТС?", "Автобус\n",0},
{5,4, "Что не относится к термину Механическое ТС", "Прицеп\n",1},
{5,5, "Что не относится к термину Механическое ТС", "Скутер\n",0},
{6,1, "Лицо передвигающееся на роликовых коньках по дороге является:", "Является водителем\n",0},
{6,2, "Лицо передвигающееся на роликовых коньках по дороге является:", "Является пассажиром\n",0},
{6,3, "Лицо передвигающееся на роликовых коньках по дороге является:", "Является пешеходом\n",1},
{6,4, "Лицо передвигающееся на роликовых коньках по дороге является:", "Может являться всеми перечисленными\n",0},
{7,1, "Является ли лицо обучаемое управлению механическим ТС водителем?", "Является, если рядом находится обучающий\n",0},
{7,2, "Является ли лицо обучаемое управлению механическим ТС водителем?", "Является, если движение осуществляется по дороге\n",0},
{7,3, "Является ли лицо обучаемое управлению механическим ТС водителем?", "Является, если движение осуществляется на автодроме\n",0},
{7,4, "Является ли лицо обучаемое управлению механическим ТС водителем?", "Не является водителем\n",1},
{8,1, "Какие элементы из перечисленных включает в себя дорога?", "Кюветы\n",0},
{8,2, "Какие элементы из перечисленных включает в себя дорога?", "Придорожные насаждения\n",0},
{8,3, "Какие элементы из перечисленных включает в себя дорога?", "Разделительные полосы\n",1},
{8,4, "Какие элементы из перечисленных включает в себя дорога?", "Обрезы\n",0},
{8,5, "Какие элементы из перечисленных включает в себя дорога?", "Все перечисленные\n",0},
{9,1, "Какие элементы являются элементами дороги?", "Разделительные полосы\n",0},
{9,2, "Какие элементы являются элементами дороги?", "Тротуары\n",0},
{9,3, "Какие элементы являются элементами дороги?", "Трамвайные пути\n",0},
{9,4, "Какие элементы являются элементами дороги?", "Пешеходные дорожки\n",0},
{9,5, "Какие элементы являются элементами дороги?", "Все перечисленные элементы\n",1},
{10,1, "Что характерно для прокола передней шины?", "Виляние автомобиля\n",0},
{10,2, "Что характерно для прокола передней шины?", "Замедление движения без увода в сторону\n",0},
{10,3, "Что характерно для прокола передней шины?", "Увеличение вибрации\n",0},
{10,4, "Что характерно для прокола передней шины?", "Появление нарастающего увода автомобиля в сторону проколотой шины\n",1},
{11,1, "По какой части дороги разрешено движение?", "По обочине\n",0},
{11,2, "По какой части дороги разрешено движение?", "По центру дороги\n",0},
{11,3, "По какой части дороги разрешено движение?", "По правой полосе\n",1},
{11,4, "По какой части дороги разрешено движение?", "По левой полосе\n",0},
{11,5, "По какой части дороги разрешено движение?", "По всем перечисленным частям\n",0},
{12,1, "Какие действия запрещены при обгоне?", "Увеличивать скорость\n",0},
{12,2, "Какие действия запрещены при обгоне?", "Подрезать обгоняющего\n",0},
{12,3, "Какие действия запрещены при обгоне?", "Препятствовать обгону\n",0},
{12,4, "Какие действия запрещены при обгоне?", "Все перечисленные действия\n",1},
{13,1, "Вынужденная остановка ТС?", "Преднамеренное прекращение движения для высадки пассажиров\n",0},
{13,2, "Вынужденная остановка ТС?", "Из-за опасности, создаваемой состоянием пассажира\n",1},
{13,3, "Вынужденная остановка ТС?", "Прекращение движения по требованию регулировщика\n",0},
{13,4, "Вынужденная остановка ТС?", "Прекращение движения для разгрузки\n",0},
{13,5, "Вынужденная остановка ТС?", "Все перечисленные соответствуют\n",0},
{14,1, "Что не соответствует термину ДТП?", "Столкновение двух велосипедистов\n",1},
{14,2, "Что не соответствует термину ДТП?", "Наезд велосипедистом с подвесным двигателем на пешехода\n",0},
{14,3, "Что не соответствует термину ДТП?", "Опрокидывание движущегося грузового автомобиля\n",0},
{14,4, "Что не соответствует термину ДТП?", "Наезд трамвая на рабочего\n",0},
{15,1, "Чем характеризуется эффективность торможения?", "Силой воздействия на педаль тормоза\n",0},
{15,2, "Чем характеризуется эффективность торможения?", "Длинной тормозного пути\n",1},
{15,3, "Чем характеризуется эффективность торможения?", "Возникновением юза при торможении\n",0},
{15,4, "Чем характеризуется эффективность торможения?", "Силой прижатия колодок к тормозным барабанам\n",0},
{16,1, "Что требуется при заносе переднеприводного автомобиля?", "Нажать на тормоза\n",0},
{16,2, "Что требуется при заносе переднеприводного автомобиля?", "Плавно увеличить скорость\n",0},
{16,3, "Что требуется при заносе переднеприводного автомобиля?", "Повернуть в сторону заноса\n",0},
{16,4, "Что требуется при заносе переднеприводного автомобиля?", "Верны 1-ый и 3-ий варианты\n",0},
{16,5, "Что требуется при заносе переднеприводного автомобиля?", "Верны 2-ой и 3-ий варианты\n",1},
{17,1, "Что требуется при заносе заднеприводного автомобиля?", "Нажать на тормоза\n",0},
{17,2, "Что требуется при заносе заднеприводного автомобиля?", "Плавно увеличить скорость\n",0},
{17,3, "Что требуется при заносе заднеприводного автомобиля?", "Повернуть в сторону заноса\n",1},
{17,4, "Что требуется при заносе заднеприводного автомобиля?", "Верны 1-ый и 3-ий варианты\n",0},
{17,5, "Что требуется при заносе заднеприводного автомобиля?", "Верны 2-ой и 3-ий варианты\n",0},
{18,1, "Как влияет алкоголь на время реакции водителя?", "Время реакции уменьшится\n",0},
{18,2, "Как влияет алкоголь на время реакции водителя?", "Время реакции увеличится\n",1},
{18,3, "Как влияет алкоголь на время реакции водителя?", "Не влияет на время реакции водителя\n",0},
{19,1, "Смещается ли прицеп автопоезда на повороте?", "Не смещается\n",0},
{19,2, "Смещается ли прицеп автопоезда на повороте?", "Смещается к центру поворота\n",1},
{19,3, "Смещается ли прицеп автопоезда на повороте?", "Смещается от центра поворота\n",0},
{20,1, "Что наиболее эффективно гасит виляние прицепа?", "Кратковременное торможение\n",0},
{20,2, "Что наиболее эффективно гасит виляние прицепа?", "Переход на нейтральную передачу\n",0},
{20,3, "Что наиболее эффективно гасит виляние прицепа?", "Поворот рулевого колеса\n",0},
{20,4, "Что наиболее эффективно гасит виляние прицепа?", "Кратковременный разгон\n",1},
{20,5, "Что наиболее эффективно гасит виляние прицепа?", "Прерывистое торможение без выключения сцепления\n",0},
{21,1, "Что соответствует термину перекрёсток?", "Пересечение с велосипедной дорожкой\n",0},
{21,2, "Что соответствует термину перекрёсток?", "Пересечение с пешеходной дорожкой\n",0},
{21,3, "Что соответствует термину перекрёсток?", "Пересечение с дорожкой для всадников\n",0},
{21,4, "Что соответствует термину перекрёсток?", "Выезд из жилой зоны\n",1},
{21,5, "Что соответствует термину перекрёсток?", "Все перечисленные соответствуют\n",0},
{22,1, "Какие места являются перекрёстками?", "Место пересечения дороги с дорожкой для всадников\n",0},
{22,2, "Какие места являются перекрёстками?", "Место пересечения дороги с велосипедной дорожкой\n",0},
{22,3, "Какие места являются перекрёстками?", "Место пересечения дороги с выездом из жилой зоны\n",1},
{22,4, "Какие места являются перекрёстками?", "Все перечисленные места являются перекрёстками\n",0},
{22,5, "Какие места являются перекрёстками?", "Все перечисленные места не являются перекрёстками\n",0},
{23,1, "Когда запрещена буксировка при помощи гибкой сцепки?", "На крутых спусках\n",0},
{23,2, "Когда запрещена буксировка при помощи гибкой сцепки?", "В гололедицу\n",1},
{23,3, "Когда запрещена буксировка при помощи гибкой сцепки?", "В тёмное время суток\n",0},
{23,4, "Когда запрещена буксировка при помощи гибкой сцепки?", "В условиях недостаточной видимости\n",0},
{23,5, "Когда запрещена буксировка при помощи гибкой сцепки?", "Во всех перечисленных случаях\n",0},
{24,1, "Максимальная скорость движения по жилой зоне?", "20км/ч\n",1},
{24,2, "Максимальная скорость движения по жилой зоне?", "40км/ч\n",0},
{24,3, "Максимальная скорость движение по жилой зоне?", "50км/ч\n",0},
{24,4, "Максимальная скорость движение по жилой зоне?", "60км/ч\n",0},
{24,5, "Максимальная скорость движения по жилой зоне?", "70км/ч\n",0},
{24,6, "Максимальная скорость движение по жилой зоне?", "90км/ч\n",0},
{24,7, "Максимальная скорость движение по жилой зоне?", "110км/ч\n",0},
{25,1, "Максимальная скорость движение при буксировке ТС?", "20км/ч\n",0},
{25,2, "Максимальная скорость движение при буксировке ТС?", "40км/ч\n",0},
{25,3, "Максимальная скорость движение при буксировке ТС?", "50км/ч\n",1},
{25,4, "Максимальная скорость движение при буксировке ТС?", "60км/ч\n",0},
{25,5, "Максимальная скорость движение при буксировке ТС?", "70км/ч\n",0},
{25,6, "Максимальная скорость движение при буксировке ТС?", "90км/ч\n",0},
{25,7, "Максимальная скорость движение при буксировке ТС?", "110км/ч\n",0},
{26,1, "Максимальная скорость движение в населенном пункте?", "20км/ч\n",0},
{26,2, "Максимальная скорость движение в населенном пункте?", "40км/ч\n",0},
{26,3, "Максимальная скорость движение в населенном пункте?", "50км/ч\n",0},
{26,4, "Максимальная скорость движение в населенном пункте?", "60км/ч\n",1},
{26,5, "Максимальная скорость движение в населенном пункте?", "70км/ч\n",0},
{26,6, "Максимальная скорость движение в населенном пункте?", "90км/ч\n",0},
{26,7, "Максимальная скорость движение в населенном пункте?", "110км/ч\n",0},
{27,1, "Максимальная скорость движение вне населенного пункта?", "20км/ч\n",0},
{27,2, "Максимальная скорость движение вне населенного пункта?", "40км/ч\n",0},
{27,3, "Максимальная скорость движение вне населенного пункта?", "50км/ч\n",0},
{27,4, "Максимальная скорость движение вне населенного пункта?", "60км/ч\n",0},
{27,5, "Максимальная скорость движение вне населенного пункта?", "70км/ч\n",0},
{27,6, "Максимальная скорость движение вне населенного пункта?", "90км/ч\n",1},
{27,7, "Максимальная скорость движение вне населенного пункта?", "110км/ч\n",0},
{28,1, "Максимальная скорость движение на автомагистралях?", "20км/ч\n",0},
{28,2, "Максимальная скорость движение на автомагистралях?", "40км/ч\n",0},
{28,3, "Максимальная скорость движение на автомагистралях?", "50км/ч\n",0},
{28,4, "Максимальная скорость движение на автомагистралях?", "60км/ч\n",0},
{28,5, "Максимальная скорость движение на автомагистралях?", "70км/ч\n",0},
{28,6, "Максимальная скорость движение на автомагистралях?", "90км/ч\n",0},
{28,7, "Максимальная скорость движение на автомагистралях?", "110км/ч\n",1},
{29,1, "Разрешается ли перестроение ТС на перекрёстках?", "Разрешается, только на обозначенных перекрёстках\n",0},
{29,2, "Разрешается ли перестроение ТС на перекрёстках?", "Разрешается, только на необозначенных перекрёстках\n",0},
{29,3, "Разрешается ли перестроение ТС на перекрёстках?", "Разрешается, только на кольцевых\n",1},
{29,4, "Разрешается ли перестроение ТС на перекрёстках?", "Разрешается на всех перекрёстках\n",0},
{29,5, "Разрешается ли перестроение ТС на перекрёстках?", "Запрещается на всех перекрёстках\n",0},
{30,1, "В каких местах из перечисленных не запрещён разворот?", "На обозначенных перекрёстках\n",1},
{30,2, "В каких местах из перечисленных не запрещён разворот?", "На мостах, путеводах, эстакадах\n",0},
{30,3, "В каких местах из перечисленных не запрещён разворот?", "На остановочных пунктах маршрутных ТС\n",0},
{30,4, "В каких местах из перечисленных не запрещён разворот?", "Не запрещён во всех перечисленных\n",0},
{30,5, "В каких местах из перечисленных не запрещён разворот?", "Запрещён во всех перечисленных\n",0},
{31,1, "Кто имеет преимущество на нерегулируемых пешеходных переходах?", "Пешеход, переходящий пешеходный переход\n",1},
{31,2, "Кто имеет преимущество на нерегулируемых пешеходных переходах?", "Водитель транспортного средства\n",0},
{32,1, "Что не соответствует термину Автопоезд?", "Колёсный трактор, буксирующий прицеп\n",0},
{32,2, "Что не соответствует термину Автопоезд?", "Седельный тягач, буксирующий полуприцеп\n",0},
{32,3, "Что не соответствует термину Автопоезд?", "Велосипед, буксирующий велосипедный прицеп\n",1},
{32,4, "Что не соответствует термину Автопоезд?", "Грузовой автомобиль, буксирующий прицеп-роспуск\n",0},
{32,5, "Что не соответствует термину Автопоезд?", "Легковой автомобиль, буксирующий прицеп\n",0},
{33,1, "Какой перекрёсток называется обозначенным?", "Перед которым установлены предупреждающие дорожные знаки\n",0},
{33,2, "Какой перекрёсток называется обозначенным?", "Перед которым установлены запрещающие дорожные знаки\n",0},
{33,3, "Какой перекрёсток называется обозначенным?", "Перед которым установлены дорожные знаки приоритета\n",1},
{33,4, "Какой перекрёсток называется обозначенным?", "Перед которым установлены светофоры\n",0},
{34,1, "Посадка/высадка пассажиров со стороны проезжей части", "Разрешается, если это невозможно сделать со стороны тотуара.\n",0},
{34,2, "Посадка/высадка пассажиров со стороны проезжей части", "Не разрешается.\n",1},
{34,3, "Посадка/высадка пассажиров со стороны проезжей части", "Разрешается только пассажиров с медицинскими противопоказаниями.\n",0},
{35,1, "В каких случаях может применяться звуковой сигнал?", "Для предупреждения о намерении прозвести обгон в населенном пункте.\n",0},
{35,2, "В каких случаях может применяться звуковой сигнал?", "Для предупреждения о намерении произвести обгон вне н.п.\n",1},
{35,3, "В каких случаях может применяться звуковой сигнал?", "Для предупреждения о намерении перестроения в н.п.\n",0},
{35,4, "В каких случаях может применяться звуковой сигнал?", "Для получения преимущества в движении.\n",0},
{35,5, "В каких случаях может применяться звуковой сигнал?", "Во всех перечисленных случаях.\n",0},
{36,1, "Перестроение на крайнюю правую полосу в целях опережения?", "Разрешается только в населенных пунктах.\n",0},
{36,2, "Перестроение на крайнюю правую полосу в целях опережения?", "Разрешается при наличии двух полос движения в данном направлении.\n",1},
{36,3, "Перестроение на крайнюю правую полосу в целях опережения?", "Разрешается в обоих случаях.\n",0},
{36,4, "Перестроение на крайнюю правую полосу в целях опережения?", "Запрещается во всех случаях.\n",0},
{37,1, "Какие внешние световые приборы должны быть включены на ТС?", "Фары ближнего света.\n",0},
{37,2, "Какие внешние световые приборы должны быть включены на ТС?", "Противотуманные фары.\n",0},
{37,3, "Какие внешние световые приборы должны быть включены на ТС?", "Задние противотуманные фонари.\n",0},
{37,4, "Какие внешние световые приборы должны быть включены на ТС?", "Габаритные огни.\n",1},
{37,5, "Какие внешние световые приборы должны быть включены на ТС?", "Включение внешних световых приборов не требуется.\n",0},
{38,1, "Что обязательно включают на ТС в темное время суток?", "Габаритные огни.\n",0},
{38,2, "Что обязательно включают на ТС в темное время суток?", "Фары ближнего света.\n",1},
{38,3, "Что обязательно включают на ТС в темное время суток?", "Задние противотуманные фонари.\n",0},
{38,4, "Что обязательно включают на ТС в темное время суток?", "Стояночные огни.\n",0},
{38,5, "Что обязательно включают на ТС в темное время суток?", "Все перечисленные.\n",0},
{39,1, "Что означает термин стоянка?", "Преднамеренное остановка ТС на время более 5 мин для его разгрузки.\n",0},
{39,2, "Что означает термин стоянка?", "Прекращение движения автомобиля из-за его технической неисправности.\n",0},
{39,3, "Что означает термин стоянка?", "Остановка ТС на время более 5 минут для посадки пассажиров.\n",0},
{39,4, "Что означает термин стоянка?", "Остановка более 5мин для осмотра и проверки состояния груза.\n",1},
{39,5, "Что означает термин стоянка?", "Остановка из-за опасности создаваемой участниками движения.\n",0},
{40,1, "Какие действия из перечисленных следует считать обгоном?", "Объезд остановившегося ТС, с выездом на полосу встречного движения.\n",0},
{40,2, "Какие действия из перечисленных следует считать обгоном?", "Опережение движущегося ТС с выездом на полосу попутного движения.\n",0},
{40,3, "Какие действия из перечисленных следует считать обгоном?", "Опережение движущегося ТС, связанное с выездом на обочину.\n",0},
{40,4, "Какие действия из перечисленных следует считать обгоном?", "Опережение движущегося ТС с выездом на полосу встречного движения.\n",1},
{41,1, "Как вы поступите если обнаружите препятствии?", "Выставите знак аварийной остановки.\n",0},
{41,2, "Как вы поступите если обнаружите препятствии?", "Немедленно снизите скорость в плоть до остановки ТС.\n",1},
{41,3, "Как вы поступите если обнаружите препятствии?", "Безопасно для других участников движения объедите препятствие.\n",0},
{41,4, "Как вы поступите если обнаружите препятствии?", "Включите задние противотуманные фонари.\n",0},
{42,1, "Стоянка автомобиля на крутом спуске дороги с бордюрным камнем?", "Под углом, передние колёса параллельно бордюрному камню.\n",0},
{42,2, "Стоянка автомобиля на крутом спуске дороги с бордюрным камнем?", "Параллельно бордюрному камню, передние колёса вдоль бордюра.\n",0},
{42,3, "Стоянка автомобиля на крутом спуске дороги с бордюрным камнем?", "Параллельно камню, повернув передние колёса, прижав их к камню.\n",1},
{43,1, "При движения ТС с включенными проблесковым маячком необходимо", "Остановиться на обочине.\n",0},
{43,2, "При движения ТС с включенными проблесковым маячком необходимо", "Уступить дорогу и обеспечить беспрепятственный проезд.\n",1},
{43,2, "При движения ТС с включенными проблесковым маячком необходимо", "Продолжить движение с особой остророжностью.\n",0},
{43,3, "При движения ТС с включенными проблесковым маячком необходимо", "Включить аварийную световую сигнализацию.\n",0},
{43,4, "При движения ТС с включенными проблесковым маячком необходимо", "Остановиться на полосе движения.\n",0},
{44,1, "В Каких местах из перечисленных запрещено движение задним ходом?", "На перекрестках кроме расположенных в жилых зонах.\n",0},
{44,2, "В Каких местах из перечисленных запрещено движение задним ходом?", "На мостах.\n",0},
{44,3, "В Каких местах из перечисленных запрещено движение задним ходом?", "В местах расположения остановочных пунктов маршрутных тс.\n",0},
{44,4, "В Каких местах из перечисленных запрещено движение задним ходом?", "В местах с видимостью дороги хотя бы в одном направлении менее 100м.\n",0},
{44,5, "В Каких местах из перечисленных запрещено движение задним ходом?", "Все перечисленные варианты.\n",1},
{45,1, "Где водитель наиболее точно выполнил требования Правил после ДТП?", "Остановился, оказал первую помощь, включил аварийку, сообщил в 911.\n",0},
{45,2, "Где водитель наиболее точно выполнил требования Правил после ДТП?", "Остановился , включил аварийку, оказал первую помощь, сообщил в 911.\n",1},
{45,3, "Где водитель наиболее точно выполнил требования Правил после ДТП?", "Остановился, сообщил в 911, оказал первую помощь, включил аварийку.\n",0},
{46,1, "Где разрешено движение пешеходов в жилых зонах?", "Только по тротуару.\n",0},
{46,2, "Где разрешено движение пешеходов в жилых зонах?", "Только по обочине.\n",0},
{46,3, "Где разрешено движение пешеходов в жилых зонах?", "По тротуару и обочине.\n",0},
{46,4, "Где разрешено движение пешеходов в жилых зонах?", "По проезжей части.\n",1},
{46,5, "Где разрешено движение пешеходов в жилых зонах?", "Во всех перечисленных местах.\n",0},
{47,1, "За нарушение правил стоянки или парковки грозит", "Предупреждение либо штраф.\n",0},
{47,2, "За нарушение правил стоянки или парковки грозит", "Штраф.\n",1},
{47,3, "За нарушение правил стоянки или парковки грозит", "Штраф либо лишение водительского удостоверения.\n",0}

/*{9,1, "Какие не существуют сигналы светофора?", "В виде силуэта трамвая\n",0},
{9,2, "Какие не существуют сигналы светофора?", "В виде силуэта пешехода\n",0},
{9,3, "Какие не существуют сигналы светофора?", "Т-образные\n",1},
{9,4, "Какие не существуют сигналы светофора?", "Х-образные\n",0},
{9,5, "Какие не существуют сигналы светофора?", "В виде стрелок\n",0},*/
/*{11,1, "Если время реакции водителя увеличится, то:", "Остановочный путь уменьшится\n",0},
{11,2, "Если время реакции водителя увеличится, то:", "Остановочный путь увеличится\n",1},
{11,3, "Если время реакции водителя увеличится, то:", "Остановочный путь не изменится\n",0},*/
/*{23,1, "Какой бензин более ядовит?", "Неэтилированный\n",0},
{23,2, "Какой бензин более ядовит?", "Этилированный\n",1},
{23,3, "Какой бензин более ядовит?", "Оба в равной степени\n",0},*/
/*{27,1, "Если время реакции водителя увеличится, то:", "Тормозной путь уменьшится\n",0},
{27,2, "Если время реакции водителя увеличится, то:", "Тормозной путь увеличится\n",0},
{27,3, "Если время реакции водителя увеличится, то:", "Тормозной путь не изменится\n",1},*/
/*{7,1, "При каких случаях действует центробежная сила ТС на повороте?", "С увеличением радиуса поворота и увеличением скорости движения.\n",0},
{7,2, "При каких случаях действует центробежная сила ТС на повороте?", "С увеличением радиуса поворота и уменьшением скорости движения.\n",0},
{7,3, "При каких случаях действует центробежная сила ТС на повороте?", "С уменьшением радиуса поворота и увеличением скорости движения.\n",1},
{7,4, "При каких случаях действует центробежная сила ТС на повороте?", "С уменьшением радиуса поворота и уменьшением скорости движения.\n",0},*/
/*{50,1, "При высадке пассажиров на проезжую часть необходимо:", "Продолжать движение после закрытия дверей.\n",0},
{50,2, "При высадке пассажиров на проезжую часть необходимо:", "Продолжать движение после закрытия дверей.\n",1},
{50,3, "При высадке пассажиров на проезжую часть необходимо:", "Уступил дорогу пешеходам и продолжил движение.\n",0},*/
};
//==============================================================================

new Text3D: Queue;
stock school_OnGameModeInit()
{
	//Queue = Create3DTextLabel("Очередь сдачи на права:", 0x88EE88FF, -2021.6122,-116.7495,1035.1719+2.0, 15.0, 3, 0);	Counter3DText ++;
	Queue = Create3DTextLabelEx("Очередь сдачи на права:", 0x88EE88FF, -2021.6122,-116.7495,1035.1719+2.0, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3);

	print("  vw_school 1.0 By: DANGER1979");
	print("_____________________________________________");
	print(" ");
}

stock school_OnPlayerConnect(playerid)
{
	DriveProgress[playerid] = 0;
	DriveSost[playerid] = 900.0;//необходимый уровень здоровья тачки
	speedpl[playerid] = 0;

//для aSchool_Ext
	//Remove Buildings///////////////////////////////////////////////////////////////////////////////////////////////
/*	RemoveBuildingForPlayer(playerid, 1532, -2025.829, -102.469, 34.273, 0.250);
	RemoveBuildingForPlayer(playerid, 11015, -2028.130, -111.273, 36.132, 0.250);
	RemoveBuildingForPlayer(playerid, 11371, -2028.130, -111.273, 36.132, 0.250);
	RemoveBuildingForPlayer(playerid, 1497, -2029.020, -120.063, 34.257, 0.250);
	RemoveBuildingForPlayer(playerid, 11014, -2076.439, -107.930, 36.968, 0.250);
	RemoveBuildingForPlayer(playerid, 11372, -2076.439, -107.930, 36.968, 0.250);
	RemoveBuildingForPlayer(playerid, 11083, -2053.909, -180.835, 37.328, 0.250);
	RemoveBuildingForPlayer(playerid, 11153, -2053.909, -180.835, 37.328, 0.250);
	RemoveBuildingForPlayer(playerid, 11099, -2056.989, -184.546, 34.414, 0.250);
*/
}

stock school2_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	#pragma unused listitem
	#pragma unused inputtext
	if(dialogid != GIVELIC_DIALOG) return 1;
	SetPVarInt(playerid, "gShowDialog", -1);
	new msgitem[256+1];
	if(!response)
	{
		iOfferTime[Offer[playerid]] = GetTickCount();
		iOfferTime[playerid] = GetTickCount();
		Offer[playerid] = MAX_PLAYERS-1;
		LicensePrice[playerid] = 0;
		format(msgitem, sizeof(msgitem), "%s отказался от предложенной услуги !!", PlayerName(playerid));
		ProxDetector(playerid, 30.0, msgitem, COLOR_LILAC,COLOR_LILAC,COLOR_LILAC,COLOR_LILAC,COLOR_LILAC);
		MenuOperation[playerid] = 0;
	 	return 1;
	}
	//else if(!strcmp(x_job, "exam", true) == 0  && IsPlayerInRangeOfPoint(playerid, 2.0, -2026.7584,-114.3740,1035.1719))
	if(MenuOperation[playerid] == 5)//для школы вождения начало STEP2
		// && IsPlayerInRangeOfPoint(playerid, 2.0, -2026.7584,-114.3740,1035.1719))
	{   //если игрок ввёл в указанной зоне /accept exam
	    if(PlayerInfo[playerid][pCarLic] == 1)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Приёмная: У вас уже есть Водительское Удостоверение, вам это не нужно!");
	        return 1;
	    }
        if(PlayerInfo[playerid][pCarLic] > 10)
        {
           	format(msgitem, sizeof(msgitem), "   Вам пока запрещена повторная сдача. Ждите начала нового часа %d часов.", PlayerInfo[playerid][pCarLic]-10);
            SendClientMessage(playerid, COLOR_GREY, msgitem);
			return 1;
        }
		if(WantedLevel[playerid] > 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Экзаменатор: Я не могу принять у тебя экзамен. Ты в розыске!");
	        return 1;
		}
		if(gJobDuty[playerid] || gOnDuty[playerid])
		{
			SendClientMessage(playerid, COLOR_GREY, "Экзаменатор: Я не могу принять у тебя экзамен. Ты на дежурстве !");
	        return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 2)
		{
			DriveProgress[playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "Приёмная: Ты уже прошёл теоретический экзамен, сядь в учебный транспорт!");
			SendPlayerQueue(playerid);
			return 1;
		}
	    if(PlayerInfo[playerid][pSTD] != IsNotBeenIll && PlayerInfo[playerid][pLevel] > 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Экзаменатор: Я не могу принять у тебя экзамен без мед. осмотра !");
			return 1;
		}
		new recovery = DutyFiveMinuts*PlayerInfo[playerid][pLevel]*8;
		MenuOperation[playerid] = 60;
		new dlgitem[266];
   		format(dlgitem, sizeof(dlgitem), "Перед практической частью экзамена\
\nнеобходимо пройти теоретический экзамен.\
\nСтоимоcть сдачи теории - $%d.\
\nВам будет предложено 10 вопросов.\
\nДопускается только 1 ошибка, иначе экзамен провален.\
\nВремя следующей сдачи не ранее чем через час.\
\n\nВы готовы начать?", recovery);
		ShowPlayerDialogEx(playerid, EXAM_DIALOG, DIALOG_STYLE_MSGBOX, "Экзаменатор:", dlgitem, "YES", "NO");
	}//GOTO STEP3
	else if(MenuOperation[playerid] == 31)//Driving
	{
		GiveLicense(playerid);
	}
	else if(MenuOperation[playerid] == 32)//DrivingA
	{
		GiveLicense(playerid);
	}
	else if(MenuOperation[playerid] == 33)//Flying
	{
		GiveLicense(playerid);
	}
	else if(MenuOperation[playerid] == 34)//Sailing
	{
		GiveLicense(playerid);
	}
	else if(MenuOperation[playerid] == 35)// Fishing
	{
		GiveLicense(playerid);
	}
	else if(MenuOperation[playerid] == 36)// Weapons
	{
		GiveLicense(playerid);
	}
	return 1;
}

stock GiveLicense(playerid)
{
    if(Offer[playerid] >= MAX_PLAYERS-1 || !IsPlayerConnected(Offer[playerid]))
	{
	    SendClientMessage(playerid, COLOR_GREY, "   Нет предложившего Вам Лицензию.!");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] == 1) {	}
	else if(GetPlayerMoneyH(playerid) >= LicensePrice[playerid])
	{
		GivePlayerMoneyH(ffamily+PlayerInfo[Offer[playerid]][pMember], playerid, -LicensePrice[playerid]);
	}
	else if(PlayerInfo[playerid][pBank] >= LicensePrice[playerid])
	{
		GivePlayerMoneyB(ffamily+PlayerInfo[Offer[playerid]][pMember], playerid, -LicensePrice[playerid]);
	}
	else return 1;

	new licence[14]; new skill;
 	if(MenuOperation[playerid] == 31) { licence = "Вождение"; PlayerInfo[playerid][pCarLic] = 1; skill = 1; }
 	else if(MenuOperation[playerid] == 32) { licence = "Мотоциклы"; PlayerInfo[playerid][pBikeLic] = 1; skill = 3;}
 	else if(MenuOperation[playerid] == 33) { licence = "Полёты"; PlayerInfo[playerid][pFlyLic] = 1; skill = 2;}
 	else if(MenuOperation[playerid] == 34) { licence = "Плавсредства"; PlayerInfo[playerid][pBoatLic] = 1; skill = 3;}
 	else if(MenuOperation[playerid] == 35) { licence = "Рыбную Ловлю"; PlayerInfo[playerid][pFishLic] = 1; skill = 1;}
 	else if(MenuOperation[playerid] == 36) { licence = "Оружие"; PlayerInfo[playerid][pGunLic] = 1; SetPlayerToTeamColor(12); skill = 2;}

	//new strings[MAX_STRING];
	format(strings, sizeof(strings), "* Инструктор выдал Вам Лицензию на %s стоимостью $%d.",
		licence, LicensePrice[playerid]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, strings);

	if(playerid != Offer[playerid])
	{
		LicensePrice[playerid] = LicensePrice[playerid]*PlayerInfo[Offer[playerid]][pRank]*PlayerInfo[Offer[playerid]][pLevel] / (6*15);
		GivePlayerMoneyB(ffamily+PlayerInfo[Offer[playerid]][pMember], Offer[playerid], LicensePrice[playerid]/3);
		new family = PlayerInfo[Offer[playerid]][pMember];
		FamilyInfo[family][fBank] += LicensePrice[playerid]/3;
		if(BizInfo[0][bTill]+LicensePrice[playerid]/3 < 2147480000) { BizInfo[0][bTill] += LicensePrice[playerid]/3; BizInfo[0][bExport] += LicensePrice[playerid]/3; }

		format(strings, sizeof(strings), "Инструктор %s выдал лицензию на %s %s'у стоимостью $%d. 1/3 переведана в казну, 1/3 переведана в кассу фракции",
			PlayerName(Offer[playerid]), licence, PlayerName(playerid), LicensePrice[playerid]);
		SendFamilyMessage(DoE, strings);
		IncreaseRank(Offer[playerid], skill);
		OnePlayAnim(Offer[playerid], "DEALER", "DEALER_DEAL", 4.1, 0, 1, 1, 0, 0); // Deal Drugs
	}
	else
	{
		FamilyInfo[DoE][fBank] += LicensePrice[playerid]/2;
		if(BizInfo[0][bTill]+LicensePrice[playerid]/2 < 2147480000) { BizInfo[0][bTill] += LicensePrice[playerid]/2; BizInfo[0][bExport] += LicensePrice[playerid]/2; }
	}
	OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 1, 1, 0, 0); // Deal Drugs
	SendPlayerUnQueue(playerid);

	Offer[playerid] = MAX_PLAYERS-1;
	LicensePrice[playerid] = 0;
	return 1;
}



//для школы вождения
stock SendPlayerQueue(playerid)//, const message[]
{
	for(new l=0; l<MAX_QUEUE_LINES; l++)
	{   //находим этого игрока в очереди
	    if(PlayerQueue[l] == playerid)
	    {   //если он есть в очереди
			SendClientMessage(playerid, COLOR_GREY, "   Вы уже стоите в очереди !");
			return 1;
		}
	}
	for(new l=0; l<MAX_QUEUE_LINES-1; l++)//от 0 до 48 иначе выход за пределы массива
	{   //освобождаем последнюю ячейку
		PlayerQueue[l] = PlayerQueue[l+1];
	}
	PlayerQueue[MAX_QUEUE_LINES-1] = playerid;//ставим в PlayerQueue[49]
	
	//начало вывода на экран
	new Text[732+29] = "Очередь сдачи на права:\n";//20*(2+7+24+3)+12=732
	new ind;
	for(new l=0; l<MAX_QUEUE_LINES; l++)
	{
		if(PlayerQueue[l] != MAX_PLAYERS-1)
	    {   //чтобы не выводить 499
			ind ++;
			if(ind > 20) break;
			format(Text, sizeof(Text), "%s%d. %s[%d]\n", Text, ind, PlayerName(PlayerQueue[l]), PlayerQueue[l]);
		}
	}
	//Delete3DTextLabel(Queue);
    UpdateDynamic3DTextLabelText(Queue, 0x88EE88FF, Text);

    //new strings[MAX_STRING];
	format(strings, sizeof(strings), "%s: Стал в очередь сдачи на права", PlayerName(playerid));
	SendFamilyMessage(DoE, strings);
	return 1;
}
stock SendPlayerUnQueue(playerid)//, const message[]
{
	new place = -1;
	for(new l=0; l<MAX_QUEUE_LINES; l++)
	{   //находим этого игрока в очереди
	    if(PlayerQueue[l] == playerid)
	    {
			place = l;
			PlayerQueue[place] = MAX_PLAYERS-1;//освобождаем его место
			break;
		}
	}
	if(place == -1) return 1;
	for(new l=place; l<MAX_QUEUE_LINES-1; l++)//от 0 до 48 иначе выход за пределы массива
	{   //подтягиваем очередь
		PlayerQueue[l] = PlayerQueue[l+1];
	}
	PlayerQueue[49] = MAX_PLAYERS-1;//освобождаем последнее место
	//------------------------------------------------------------------
	//начало вывода на экран
	new Text[732+29] = "Очередь сдачи на права:\n";//20*(2+7+24+3)+12=732
	new ind;
	for(new l=0; l<MAX_QUEUE_LINES; l++)
	{
		if(PlayerQueue[l] != MAX_PLAYERS-1)
	    {   //чтобы не выводить 499
			ind ++;
			if(ind > 20) break;
			format(Text, sizeof(Text), "%s%d. %s[%d]\n", Text, ind, PlayerName(PlayerQueue[l]), PlayerQueue[l]);
		}
	}
	//Delete3DTextLabel(Queue);
    UpdateDynamic3DTextLabelText(Queue, 0x88EE88FF, Text);
    //new strings[MAX_STRING];
	format(strings, sizeof(strings), "%s: Вышел из очереди сдачи на права", PlayerName(playerid));
	SendFamilyMessage(DoE, strings);
	return 1;
}
stock StopDriveProgress(playerid)
{
	//SendPlayerUnQueue(playerid);
	//==========================================================================
	DriveProgress[playerid] = 0;
	gTakingLesson[playerid] = 0;
	DisablePlayerCheckpointEx(playerid);

	UnLockCar(LastCar[playerid]);
	GameTextForPlayerEx(playerid, "~w~Vehicle ~g~Unlocked", 5000, 6);

	SetPlayerVirtualWorldEx(playerid, 0);
	SetVehicleVirtualWorldEx(LastCar[playerid], 0);
	RemovePlayerFromVehicleEx(playerid);//высадить из машины игрока
	SetVehicleToRespawnEx(playerid, LastCar[playerid]);//вернуть транспорт на респ

	//for(new o = 0; o < MAX_STREAM_OBJECTS; o++)
	/*for(new o = 0; o < 166; o++)
	{
	    if(	PlayerObjects[o][oModel] == 1225 )
	    {
			objActivated[playerid][o] = false;
			//DestroyDynamicObject(objPlayer[playerid][objid][o]);
			//objPlayer[playerid][view][o] = false;
		}
	}*/
}



//stock PDDExam_STATE_ONFOOT(playerid)
stock school_OnPlayerStateChange(playerid, newstate)
{
	if(newstate == PLAYER_STATE_ONFOOT)//если ID нового состояния равно состоянию на ногах
	{
//если ID нового состояния равно состоянию 1
		if(DriveProgress[playerid] > 0)
		{
			StopDriveProgress(playerid);
			//SetPlayerPosEx(playerid, -1980.8552,253.6175,35.3494);
			SendClientMessage(playerid, COLOR_RED,  "Экзаменатор: {33AA33}Нельзя выходить из транспорта во время сдачи экзамена. Идите в автошколу, чтобы начать заново!");
			format(strings, sizeof(strings), "Экзаменатор: {33AA33}урок остановлен у %s's . Причина: выход из транспорта !", PlayerName(playerid));
			SendFamilyMessage(DoE, strings);
		}
		return 1;
	}

	//==========================================================================
	if(newstate != PLAYER_STATE_DRIVER) return 1;
	new vehicleid = nCarID[playerid];//nCarID[playerid] = GetPlayerVehicleID(playerid);//считывается в player_OnPlayerStateChange(playerid, newstate, oldstate)
	PDDExam_STATE_DRIVER(playerid, vehicleid);
/*
	new modelid = nCarModel[playerid];//считывается в player_OnPlayerStateChange(playerid, newstate, oldstate)
	//для проверки на лицензии
	if(IsInBoat(vehicleid))
	{
	    if(PlayerInfo[playerid][pBoatLic] != 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "   Вы не можете управлять Лодкой, вам нужно получить лицензию!");
 			RemovePlayerFromVehicleEx(playerid); return 1;
		}
	}
	else if(IsInPlane(vehicleid))
	{
	    if(PlayerInfo[playerid][pFlyLic] != 1)
		{
			if(modelid == 469)
			{
				if(gTakingLesson[playerid] != 2)
				{
	    			SendClientMessage(playerid, COLOR_GREY, "   Вы не можете летать, вам нужно получить лицензию на полёт!");
             		//RemovePlayerFromVehicleEx(playerid); return 1;
           		}
			}
			else
			{
    			SendClientMessage(playerid, COLOR_GREY, "   Вы не можете летать, вам нужно получить лицензию на полёт!");
       			RemovePlayerFromVehicleEx(playerid); return 1;
			}
		}
	}
	else if(IsInBike(vehicleid) || VehicleArray[nCarModel[playerid]-400][Category] == Rail_Transport) { }//для вождения без прав
	else if(IsInMotorcycle(vehicleid))
	{//лицензия на мото
	    if(PlayerInfo[playerid][pBikeLic] != 1 && PlayerInfo[playerid][pMember] != TEAM_BIKER)
		{
	    	//SendClientMessage(playerid, COLOR_GREY, "   Вы не можете ездить на мотоцикле, вам нужно получить лицензию у Школьного Инструктора !");
	    	SendClientMessage(playerid, COLOR_GREY, "   При езде на мотоцикле без прав, вы можете быть оштрафованы !");
	    	//RemovePlayerFromVehicleEx(playerid);
			return 1;
		}
	}
	else//если вы сели во что-то другое чем указанное выше, т.е. scooter, велосипед
	{
		if(PlayerInfo[playerid][pMember] == TEAM_BIKER)//если у вас не прав на авто
		{//PlayerInfo[playerid][pCarLic] != 1 ||
			if(gTakingLesson[playerid] != 1 && !gInDerbyBloodBowl[playerid] && !gInDerby8ball[playerid])
			{
				if(modelid != 405)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Вы не можете водить машину ! Вы же байкер !");//, вам нужно сдать экзамен на вождение
    				//SendClientMessage(playerid, COLOR_GREY, "   При езде на мотоцикле без прав, вы можете быть оштрафованы !");
           			RemovePlayerFromVehicleEx(playerid);
		   			return 1;
           		}
			}
		}
		else if(PlayerDrunk[playerid] >= 5)
		{
		    WantedPoints[playerid] += 25;
			format(strings, sizeof(strings), " Вождение в состоянии Алкогольного Опьянения без прав [%d]", nCarID[playerid]);
			SetPlayerCriminal(DoT, playerid, INVALID_PLAYER_ID, strings);
		}
	}//Done with car check
*/
	return 1;
}

stock PDDExam_STATE_DRIVER(playerid, vehicleid)
{
	//new modelid = GetVehicleModel(vehicleid);
	new modelid = nCarModel[playerid];//считывается в player_OnPlayerStateChange(playerid, newstate, oldstate)
	if(modelid == 405 && !gRealWar)//для школы вождения начало STEP5  || nCarModel[playerid] == 469
	{   //когда игрок сел в учебную машину с экзаменационной картой
	    if(PlayerInfo[playerid][pCarLic] == 2)//PlayerInfo[playerid][pMember] != DoT &&
		{
			for(new j=0, i; j<MaxPlayers; j++)	{
				i = PLIDs[j];
				if( !IsPlayerConnectedEx(i) ) continue;
				if(	DriveProgress[i] > 0 && DriveProgress[i] <= 6
					&& vehicleid != LessonCar[0]
					&& vehicleid != LessonCar[1]
					&& vehicleid != LessonCar[2] )
				{
					format(strings, sizeof(strings), "Приёмная: Автодром занял %s[%d]. Подождите !", PlayerName(i), i);
					SendClientMessage(playerid, COLOR_GREY, strings);
					RemovePlayerFromVehicleEx(playerid);
					return 1;
				}
			}
			if(DriveProgress[playerid] == 0 &&
				(vehicleid == LessonCar[0] || vehicleid == LessonCar[1] ||vehicleid == LessonCar[2]) )
			{
    			VehInfo[vehicleid][cFuel] = float(VehicleArray[modelid-400][GasMax]);//заправили
				SendClientMessage(playerid, COLOR_RED, "Экзаменатор: Нельзя повреждать Транспорт при сдаче, иначе придется сдавать экзамен заново");
				RepairVehicleEx(playerid, vehicleid);

				/*for(new o = 0; o < 166; o++)
				{
				    if(	PlayerObjects[o][oModel] == 1225)
				    {
						objActivated[playerid][o] = true;
					    //objPlayer[playerid][objid][o] =	CreateDynamicObject(
						//	PlayerObjects[o][oModel],
						//	PlayerObjects[o][oX],PlayerObjects[o][oY],PlayerObjects[o][oZ],
						//	PlayerObjects[o][orX],PlayerObjects[o][orY],PlayerObjects[o][orZ]);//, worldid = -1, interiorid = -1, playerid = -1, Float:distance = 200.0
						//objPlayer[playerid][view][o] = true;
				    }
				}*/
				DriveProgress[playerid] = 1;
				SetPlayerCheckpointEx(playerid, DriveSchool[DriveProgress[playerid]][0],DriveSchool[DriveProgress[playerid]][1],DriveSchool[DriveProgress[playerid]][2],
					DriveSchool[DriveProgress[playerid]][3]);
				LockCar(vehicleid);//блокируем двери carid
				GameTextForPlayerEx(playerid, "~w~Vehicle ~r~Locked", 5000, 6);
				//PlaySoundForPlayer(playerid, SOUND_RESTAURANT_TRAY_COLLISION);

				//LastCar[playerid] = 0;
				if( IsPlayerInAnyVehicle(playerid) )
				{
					SetPlayerVirtualWorldEx(playerid, FREEROAM);
					SetVehicleVirtualWorldEx(vehicleid, FREEROAM);
				}
				SendClientMessage(playerid, COLOR_BRIGHTLYGREEN, "Экзаменатор: Приступай к тесту!!!");
			}
			//else SendClientMessage(playerid, COLOR_BRIGHTLYGREEN, "ПРОВЕРКА1");
		}
		else if(PlayerInfo[playerid][pCarLic] != 2
				&& PlayerInfo[playerid][pMember] != DoE
			 	&& PlayerInfo[playerid][pJob] != CARJACKER
				&& PlayerInfo[playerid][pMember] != DoT)
		{   // && PlayerInfo[playerid][pMember] != Hitman
			SendClientMessage(playerid, COLOR_GREY, "   Вы не имеете право на использование этого транспорта, т.к. не прошли теоретический экзамен !");
			RemovePlayerFromVehicleEx(playerid);
			return 1;
		}
	}//для школы вождения конец
	return 1;
}

stock school_OnPlayerDeath(playerid)
{
	//Для школы вождения начало
	if(DriveProgress[playerid] > 0)
	{
		StopDriveProgress(playerid);
		SendClientMessage(playerid, COLOR_RED, "Экзаменатор: {33AA33}Ты не прошел тест на вождение. Приходи еще раз за экзаменационной картой в автошколу!");
        format(strings, sizeof(strings), "Экзаменатор: {33AA33}урок остановлен у %s's . Причина: смерть игрока !", PlayerName(playerid));
		SendFamilyMessage(DoE, strings);
	}//Для школы вождения конец
}


stock school_OnPlayerDisconnect(playerid)
{
	gTakingLesson[playerid] = 0;
  	SendPlayerUnQueue(playerid);//если он есть в очереди то выкинуть
	if(DriveProgress[playerid] > 0)
	{
		StopDriveProgress(playerid);
        format(strings, sizeof(strings), "CEPBEP: {800000}урок остановлен у %s's. reason: left the server !", PlayerName(playerid));
		SendFamilyMessage(DoE, strings);
	}
}

stock school_OnPlayerEnterVehicle(playerid, vehicleid)
{
	if((vehicleid == LessonCar[0] || vehicleid == LessonCar[1] || vehicleid == LessonCar[2]) &&
		PlayerInfo[playerid][pMember] != DoE && PlayerInfo[playerid][pCarLic] != 2)
	{   //gSchoolLockDoor == 1 &&
		SendClientMessage(playerid, COLOR_GREY, "  Вы не прошли теоретический экзамен по ПДД !");
		GameTextForPlayerEx(playerid, "~r~Closed", 5000, 1);//по англ обязательно
		ClearAnimations(playerid, 1);
		return 1;
	}
	return 0;
}


stock school_OnPlayerExitVehicle(playerid, vehicleid)
{
	if( DriveProgress[playerid] > 0)//Для школы вождения начало
	{
 		PutPlayerInVehicleEx(playerid, vehicleid, 2);//чтобы поместить игрока в указанный транспорт на пасажирское сиденье
		PutPlayerInVehicleEx(playerid, vehicleid, 0);//чтобы поместить игрока в указанный транспорт на водительское сиденье
	   	GameTextForPlayerEx(playerid, "~r~You can't Left car", 2000, 1);//отобразить
    }//Для школы вождения конец
}

stock school_OnEnterCheckpoint(playerid)
{
	if(DriveProgress[playerid] > 0)
	{   //если урок начат и контрольная точка установлена
		new Float:DrS;
		GetVehicleHealth(nCarID[playerid], DrS);
		if(DrS < DriveSost[playerid])
		{
			DisablePlayerCheckpointEx(playerid);
			StopDriveProgress(playerid);
			SendClientMessage(playerid, COLOR_RED,  "Экзаменатор: Транспорт поврежден, ты не аккуратно ехал. Экзамен провален! Иди в автошколу.");
	        format(strings, sizeof(strings), "CEPBEP: {800000}урок остановлен у %s's . Причина: повреждение транспорта !", PlayerName(playerid));
			SendFamilyMessage(DoE, strings);
	    	return 1;//чтобы не выполнилось if(DriveProgress[playerid] < 6)
		}
		if(DriveProgress[playerid] == MAX_POINT-1)//если все 69 отметок пройдено
		{	//для школы вождения начало STEP8

			if(PlayerInfo[playerid][pLevel] > 1)
			{
				new ExamPrice = 2500*PlayerInfo[playerid][pLevel];
				GivePlayerMoneyB(ffamily+PlayerInfo[playerid][pMember], playerid, -ExamPrice);
				FamilyInfo[DoE][fBank] += ExamPrice/2;
				if(BizInfo[0][bTill]+ExamPrice/2 < 2147480000) { BizInfo[0][bTill] += ExamPrice/2; BizInfo[0][bExport] += ExamPrice/2; }
	        	format(strings, sizeof(strings), "Экзаменатор: Экзамен сдан. Стоимость оформления документов $%d. \
					Водительское Удостоверение ВЫДАНО!", ExamPrice);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE,strings);
			}
			else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Экзаменатор: Экзамен сдан. Водительское Удостоверение ВЫДАНО!");

		    DriveProgress[playerid] ++;
			format(strings, sizeof(strings), "~w~%d ~y~/~r~%d", DriveProgress[playerid], MAX_POINT);
			GameTextForPlayerEx(playerid, strings, 2000, 4);

			StopDriveProgress(playerid);
			PlayerInfo[playerid][pCarLic] = 1;
	        format(strings, sizeof(strings), "CEPBEP: {800000}урок остановлен у %s's . Причина: экзамен сдан !", PlayerName(playerid));
			SendFamilyMessage(DoE, strings);
		    return 1;//чтобы не выполнилось if(DriveProgress[playerid] < 6)
		}
		else if(DriveProgress[playerid] > 6 && DriveProgress[playerid] < MAX_POINT-1)//на выходе 69
	    {
		    DriveProgress[playerid] ++;//7+1=8 - 69-1+1=69
		    SetPlayerCheckpointEx(playerid,
				DriveSchool[DriveProgress[playerid]][0],
				DriveSchool[DriveProgress[playerid]][1],
				DriveSchool[DriveProgress[playerid]][2],
				DriveSchool[DriveProgress[playerid]][3]);
	    }
		else if(DriveProgress[playerid] == 6)//на выходе 7
	    {	//для школы вождения начало STEP7
		    DriveProgress[playerid] ++;//6+1=7
		    SetPlayerCheckpointEx(playerid,
				DriveSchool[DriveProgress[playerid]][0],
				DriveSchool[DriveProgress[playerid]][1],
				DriveSchool[DriveProgress[playerid]][2],
				DriveSchool[DriveProgress[playerid]][3]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Экзаменатор: Ты прошел автодром. Второй этап: вождение по городу. Приступай!");
	    	SetVehiclePosEx(nCarID[playerid],-2047.0730,-95.9239,35.1718);
		    SetVehicleZAngleEx(nCarID[playerid],0.0);
			/*for(new o = 0; o < 166; o++)
			{
			    if(	PlayerObjects[o][oModel] == 1225)
			    {
					objActivated[playerid][o] = false;
					//DestroyDynamicObject(objPlayer[playerid][objid][o]);
					//objPlayer[playerid][view][o] = false;
				}
			}*/
			if( IsPlayerInAnyVehicle(playerid) )
			{
				SetPlayerVirtualWorldEx(playerid, 0);
				SetVehicleVirtualWorldEx(nCarID[playerid], 0);
			}
	    }
		else if(DriveProgress[playerid] < 6)//на выходе 6
	    {   //DriveProgress[playerid] > 0 &&
	        if(DriveProgress[playerid] == 1) SendPlayerUnQueue(playerid);
		    DriveProgress[playerid] ++;//1+1=2 - 5+1=6
		    SetPlayerCheckpointEx(playerid,
				DriveSchool[DriveProgress[playerid]][0],
				DriveSchool[DriveProgress[playerid]][1],
				DriveSchool[DriveProgress[playerid]][2],
				DriveSchool[DriveProgress[playerid]][3]);
		}
		format(strings, sizeof(strings), "~w~%d ~y~/~r~%d",DriveProgress[playerid],MAX_POINT);
		GameTextForPlayerEx(playerid, strings, 2000, 4);
	}//Для школы вождения конец

	if(GetCheckpointType(playerid) == CP_DRIVESCHOOL)
	{	//для школы вождения начало STEP1
		//GameTextForPlayerEx(playerid, "~g~Welcome,~n~~y~Use (~w~/accept exam~y~) to take on a Drive Test", 5000, 3);
        //SendClientMessage(playerid, COLOR_GREY, "Приёмная: У вас уже есть Водительское Удостоверение, вам это не нужно!");
        //return 1;
		if(gParameter2[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "    В отчаянии Вы не можете сдать на прова !");
			SendClientMessage(playerid, COLOR_GREY, "    Вам необходимо развлечься: посетите клубы и потанцуйте !");
			return 1;
		}
        new msgitem[] = "1. Ознакомиться с вопросами на экзамен\
\n2. Пройти экзамен на получение лицензии на Авто.\
\n3. Получить лицензию на Мото.\
\n4. Получить лицензию на Воздушные средства.\
\n5. Получить лицензию на Плавательные средства.\
\n6. Получить лицензию на Оружие.\
\n\nнажмите Accept, чтобы начать сдачу экзамена.\n";
		ShowPlayerDialogGap(playerid, AUTOSCHOOL_DIALOG, DIALOG_STYLE_LIST, "Добро пожаловать в АвтоШколу", msgitem, "Accept", "Cancel");
	}
	return 1;
}


stock school_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
		//#pragma unused listitem
		#pragma unused inputtext
		if(dialogid != AUTOSCHOOL_DIALOG) return 1;
		SetPVarInt(playerid, "gShowDialog", -1);
		if(!response)
		{
			return 1;
		}
		new msgitem[256+1];
		new giveplayerid;
//ShowPlayerDialogGap(playerid, AUTOSCHOOL_DIALOG, DIALOG_STYLE_LIST, "Добро пожаловать в АвтоШколу", msgitem, "Accept", "Cancel");

		if(listitem == 0)
		{//Ознакомиться с вопросами на экзамен
			new idx;
			new bigmsgitem[2024];//2024/(13+66+70)=13
			for(new q=0; q<MAX_SIZE_QUESTIONS; q++)
			{   //сканируем весь массив по номеру вопроса
					if(PDD_Exam[q][ex_correct] == 1)
				{   //если нашли вопрос и правильный на него ответ
					if(idx >= 13) break;
					idx++;
					format(bigmsgitem, sizeof(bigmsgitem), "%s%d. %s: %s",
					bigmsgitem, idx, PDD_Exam[q][ex_question], PDD_Exam[q][ex_answer]);
		    	}
			}
			if(strlen(bigmsgitem) > sizeof(bigmsgitem))
			{
				//ИНФОРМИРОВАНИЕ
				//new strings[MAX_STRING];
				format(strings, sizeof(strings), "Error13: Вопросы ПДД - %s[%d], strlen(bigmsgitem): %d, sizeof(bigmsgitem): %d",
					PlayerName(playerid), playerid, strlen(bigmsgitem), sizeof(bigmsgitem));
				Log(ERROR, strings);
				return 1;
			}
			new caption[36+4];
			format(caption, sizeof(caption), "Экзаменационные вопросы по ПДД [%d]", strlen(bigmsgitem));
			ShowPlayerDialogGap(playerid, DIALOG100, DIALOG_STYLE_MSGBOX, caption, bigmsgitem, "OK", "");
		}
		else if(listitem == 1)
		{//\n2. Пройти экзамен на получение лицензию на Авто.
			MenuOperation[playerid] = 5;
			ShowPlayerDialogGap(playerid, GIVELIC_DIALOG, DIALOG_STYLE_MSGBOX, "Экзаменатор", "Добро пожаловать в АвтоШколу,\n\nнажмите Accept, чтобы начать сдачу экзамена по вождению\n", "Accept", "Cancel");
		}
		else if(listitem == 2)
		{
	        if(PlayerInfo[playerid][pBikeLic] == 1)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Вы уже имеете эту лицензию !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 10)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Лицензия на право управлением мототехникой Выдаётся лицам, прожившим в штате не менее 10 лет !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pBikeLic] > 10)
	        {
            	format(msgitem, sizeof(msgitem), "   Вы лишёны Лицензии на Мотоциклы на %d часов.", PlayerInfo[playerid][pBikeLic]-10);
				SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
		    if(PlayerInfo[playerid][pSTD] != IsNotBeenIll && PlayerInfo[playerid][pLevel] > 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Вы не можете получить лицензию без мед. осмотра !");
				return 1;
			}
		    LicensePrice[playerid] = 10000*(PlayerInfo[playerid][pLevel]+PlayerInfo[playerid][pRank])/10;//для экономики
	        if(GetPlayerMoneyH(playerid) < LicensePrice[playerid] &&
				PlayerInfo[playerid][pBank] < LicensePrice[playerid])
	        {
	            format(msgitem, sizeof(msgitem), "   Вы не можете оплатить лизенцию стоимостью $%d.", LicensePrice[playerid]);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
#if defined vw_sql//#endif
			new ToBase[74+24+2];
			format(ToBase, sizeof(ToBase), "SELECT `IND` FROM `blacklist` WHERE `Player`='%s' AND Family=%d", PlayerName(playerid), DoE);
			/*mysql_query(ToBase); mysql_store_result();
			if(mysql_num_rows() > 0)
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			mysql_free_result();*/
			new DBResult:db_result = db_query(db_VW, ToBase);
			if(db_num_rows(db_result))
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			db_free_result(db_result);
#endif
	        Offer[playerid] = playerid;
	        MenuOperation[playerid] = 32;
	        new dlgitem[91+24+10];
			format(dlgitem, sizeof(dlgitem), "\nпредложил вам лицензию на Мотоциклы стоимостью $%d.\n\nНажмите Accept, чтобы принять.",
				LicensePrice[playerid]);
	        ShowPlayerDialogGap(playerid, GIVELIC_DIALOG, DIALOG_STYLE_MSGBOX, "Инструктор", dlgitem, "Accept", "Cancel");
        }
		else if(listitem == 3)
		{
 	        if(PlayerInfo[playerid][pFlyLic] == 1)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Вы уже имеете эту лицензию !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 2)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Лицензия на право управлением воздушным транспортом Выдаётся лицам, прожившим в штате не менее двух лет !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pFlyLic] > 10)
	        {
            	format(msgitem, sizeof(msgitem), "   Вы лишёны Лицензии на Полёты на %d часов.", PlayerInfo[giveplayerid][pFlyLic]-10);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
		    if(PlayerInfo[playerid][pSTD] != IsNotBeenIll && PlayerInfo[playerid][pLevel] > 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Вы не можете получить лицензию без мед. осмотра !");
				return 1;
			}
		    LicensePrice[playerid] = 5000*(PlayerInfo[playerid][pLevel]+PlayerInfo[playerid][pRank])/2;//для экономики
	        if(GetPlayerMoneyH(playerid) < LicensePrice[playerid] &&
				PlayerInfo[playerid][pBank] < LicensePrice[playerid])
	        {
	            format(msgitem, sizeof(msgitem), "   Вы не можете оплатить лизенцию стоимостью $%d.", LicensePrice[playerid]);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
#if defined vw_sql//#endif
			new ToBase[74+24+2];
			format(ToBase, sizeof(ToBase), "SELECT `IND` FROM `blacklist` WHERE `Player`='%s' AND Family=%d", PlayerName(playerid), DoE);
			/*mysql_query(ToBase); mysql_store_result();
			if(mysql_num_rows() > 0)
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			mysql_free_result();*/
			new DBResult:db_result = db_query(db_VW, ToBase);
			if(db_num_rows(db_result))
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			db_free_result(db_result);
#endif
			Offer[playerid] = playerid;
	        MenuOperation[playerid] = 33;
			new dlgitem[88+24+10];
			format(dlgitem, sizeof(dlgitem), "\nпредложил вам лицензию на Полёты стоимостью $%d.\n\nНажмите Accept, чтобы принять.", LicensePrice[playerid]);
	        ShowPlayerDialogGap(playerid, GIVELIC_DIALOG, DIALOG_STYLE_MSGBOX, "Инструктор", dlgitem, "Accept", "Cancel");
		}
		else if(listitem == 4)
		{
	        if(PlayerInfo[playerid][pBoatLic] == 1)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Вы уже имеете эту лицензию !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 2)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Лицензия на право управлением водным транспортом Выдаётся лицам, прожившим в штате не менее двух лет !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pBoatLic] > 10)
	        {
            	format(msgitem, sizeof(msgitem), "   Вы лишёны Лицензии на Плавсредства на %d часов.", PlayerInfo[giveplayerid][pBoatLic]-10);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
		    if(PlayerInfo[playerid][pSTD] != IsNotBeenIll && PlayerInfo[playerid][pLevel] > 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Вы не можете получить лицензию без мед. осмотра !");
				return 1;
			}
		    LicensePrice[playerid] = 3000*(PlayerInfo[playerid][pLevel]+PlayerInfo[playerid][pRank])/2;//для экономики
	        if(GetPlayerMoneyH(playerid) < LicensePrice[playerid] &&
				PlayerInfo[playerid][pBank] < LicensePrice[playerid])
	        {
	            format(msgitem, sizeof(msgitem), "   Вы не можете оплатить лизенцию стоимостью $%d.", LicensePrice[playerid]);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
#if defined vw_sql//#endif
			new ToBase[74+24+2];
			format(ToBase, sizeof(ToBase), "SELECT `IND` FROM `blacklist` WHERE `Player`='%s' AND Family=%d", PlayerName(playerid), DoE);
			/*mysql_query(ToBase); mysql_store_result();
			if(mysql_num_rows() > 0)
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			mysql_free_result();*/
			new DBResult:db_result = db_query(db_VW, ToBase);
			if(db_num_rows(db_result))
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			db_free_result(db_result);
#endif
	        Offer[playerid] = playerid;
	        MenuOperation[playerid] = 34;
	        new dlgitem[94+24+10];
			format(dlgitem, sizeof(dlgitem), "\nпредложил вам лицензию на Плавсредства стоимостью $%d.\n\nНажмите Accept, чтобы принять.", LicensePrice[playerid]);
	        ShowPlayerDialogGap(playerid, GIVELIC_DIALOG, DIALOG_STYLE_MSGBOX, "Инструктор", dlgitem, "Accept", "Cancel");
		}
		else if(listitem == 5)
		{
	        if(PlayerInfo[playerid][pGunLic] == 1)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Вы уже имеете эту лицензию !");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 3)
	        {
		        SendClientMessage(playerid, COLOR_GREY, "   Лицензия на ношение оружия Выдаётся лицам, прожившим в штате не менее трёх лет!");
			    return 1;
	        }
	        if(PlayerInfo[playerid][pGunLic] > 10)
	        {
            	format(msgitem, sizeof(msgitem), "   Вы лишёны лицензии на оружие на %d часов.", PlayerInfo[playerid][pGunLic]-10);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
		    if(PlayerInfo[playerid][pSTD] != IsNotBeenIll && PlayerInfo[playerid][pLevel] > 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Вы не можете получить лицензию без мед. осмотра !");
				return 1;
			}
		    LicensePrice[playerid] = 7000*(PlayerInfo[playerid][pLevel]+PlayerInfo[playerid][pRank])/3;//для экономики
	        if(GetPlayerMoneyH(playerid) < LicensePrice[playerid] &&
				PlayerInfo[playerid][pBank] < LicensePrice[playerid])
	        {
	            format(msgitem, sizeof(msgitem), "   Вы не можете оплатить лизенцию стоимостью $%d.", LicensePrice[playerid]);
	            SendClientMessage(playerid, COLOR_GREY, msgitem);
				return 1;
	        }
#if defined vw_sql//#endif
			new ToBase[74+24+2];
			format(ToBase, sizeof(ToBase), "SELECT `IND` FROM `blacklist` WHERE `Player`='%s' AND Family=%d", PlayerName(playerid), DoE);
			/*mysql_query(ToBase); mysql_store_result();
			if(mysql_num_rows() > 0)
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			mysql_free_result();*/
			new DBResult:db_result = db_query(db_VW, ToBase);
			if(db_num_rows(db_result))
		 	{
	       		SendClientMessage(playerid, COLOR_GREY, "   Находясь в Чёрном Списке вы платите по двойному тарифу!");
				LicensePrice[playerid] = LicensePrice[playerid] * 2;
			}
			db_free_result(db_result);
#endif
	        Offer[playerid] = playerid;
	        MenuOperation[playerid] = 36;
	        new dlgitem[88+24+10];
			format(dlgitem, sizeof(dlgitem), "\nпредложил вам лицензию на Оружие стоимостью $%d.\n\nНажмите Accept, чтобы принять.", LicensePrice[playerid]);
	        ShowPlayerDialogGap(playerid, GIVELIC_DIALOG, DIALOG_STYLE_MSGBOX, "Инструктор", dlgitem, "Accept", "Cancel");
		}
		return 1;
}

stock school_OnPlayerPickUpPickup(playerid)
{
	if( IsPlayerInRangeOfPoint(playerid, 2.2, -2026.6433,-101.5586,35.2641) )
	{   //Driving School
		if(gSchoolLockDoor == 1 && PlayerInfo[playerid][pMember] != DoE)
		{
			GameTextForPlayerEx(playerid, "~r~Closed", 5000, 1);//по англ обязательно
			return 1;
		}
		SetPlayerVirtualWorldEx(playerid, 3);
	    SetPlayerInteriorEx(playerid, 3);
	    PlayerInfo[playerid][pLocal] = 253;//FREEROAM;
		SetPlayerPosEx(playerid, -2026.8602,-105.4264,1035.1719, 180.0);
	    GameTextForPlayerEx(playerid, "~w~Welcome to the ~n~~y~Driving School", 5000, 1);
	}
	else if( IsPlayerInRangeOfPoint(playerid, 2.2, -2029.8828,-120.5207,35.2693) )
	{   //Driving School Poligon
		if(PlayerInfo[playerid][pMember] != DoE)
		{   //gSchoolLockDoor == 1 &&
			GameTextForPlayerEx(playerid, "~r~Closed", 5000, 1);//по англ обязательно
			return 1;
		}
		SetPlayerVirtualWorldEx(playerid, 3);
	    SetPlayerInteriorEx(playerid, 3);
		PlayerInfo[playerid][pLocal] = 253;
		SetPlayerPosEx(playerid, -2029.8196,-117.3415,1035.1719, 0.0);
	    GameTextForPlayerEx(playerid, "~w~Welcome to the ~n~~y~Driving School", 5000, 1);
	}
	return 1;
}


stock OnPlayerPDDExam(playerid, listitem, questions)
{	//вызывается из OnDialogResponse
	new listitems[512];
	new article;

	if(questions > 0)
	{   //если вопрос не первый, т.е. у он уже был задан
		for(new q=0; q<MAX_SIZE_QUESTIONS; q++)
		{   //определяем к какой ячейке относится выбранный нами пункт из списка
			if(list_questions[playerid][questions-1] == PDD_Exam[q][ex_article])//list_questions от 1
			//if(list_questions[playerid][questions] == PDD_Exam[i][ex_article])//list_questions от 1
			{   //сканируем все вопросы с номером в первой ячейки массива list_questions
				if(listitem+1 == PDD_Exam[q][ex_part])
				{   //определяем номер ячейки соответсвующий нашему выбору
					article = q;
					break;
			    }
			}
		}
		if(PDD_Exam[article][ex_correct] != 1)
		{   //если по данному выбранному пункту ответ не равен 1
			SendClientMessage(playerid, COLOR_RED, "   НЕ ПРАВИЛЬНО !");
			IncorrectCounter[playerid] ++;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "   ОТВЕТ ПРИНЯТ !");
		}
	}
	//--------------------------------------------------------------------------
    if(questions == 10)
    {   //если OnPlayerPDDExam(playerid, listitem, 10), то выход из экзамена
		//new strings[MAX_STRING];
    	if(IncorrectCounter[playerid] <= 1)
		{	//для школы вождения начало STEP4
			PlayerInfo[playerid][pCarLic] = 2;
			DriveProgress[playerid] = 0;
			//gTakingLesson[playerid] = 1;
			SendPlayerQueue(playerid);
			new recovery = 2500*PlayerInfo[playerid][pLevel];
			new msgitem[270+2+5];
			format(msgitem, sizeof(msgitem), "Сделано ошибок - %d.\
				\nИдите на закрытую площадку и сядте в учебный транспорт!\
				\n\nСтоимость прохождения экзамена в автоматическом режиме $%d.\
				\n\nИли подойдите к любому из инструкторов\
				\n и пропросите начать урок.\
				\nСтоимость прохождения экзамена у инструктора - $2500.",
				IncorrectCounter[playerid], recovery);
			//SendClientMessage(playerid, COLOR_LIGHTBLUE, strings);
			ShowPlayerDialogEx(playerid, DIALOG100, DIALOG_STYLE_MSGBOX, "Экзаменатор:", msgitem, "OK", "");
			IncorrectCounter[playerid] = 0;
		}
		else
		{
			PlayerInfo[playerid][pCarLic] = 11;
			format(strings, sizeof(strings), "Экзаменатор: Сделано ошибок - %d. Вы не прошли теоретический экзамен. Приходите через час для пересдачи.", IncorrectCounter[playerid]);
			SendClientMessage(playerid, COLOR_GREY, strings);
			IncorrectCounter[playerid] = 0;
		}
    }
//создаем список ответов для определённого вопроса
    else //if(questions >= 0 && questions < 10)
    {
		new info[70];
		for(new q=0; q<MAX_SIZE_QUESTIONS; q++)
		{   //сканируем весь массив по номеру вопроса
			if(list_questions[playerid][questions] == PDD_Exam[q][ex_article])
			{   //добавляем все варианты ответов для вопроса list_questions[playerid][questions]
				article = q;
				format(listitems, sizeof(listitems),
					"%s%d: %s",
					listitems, PDD_Exam[q][ex_part], PDD_Exam[q][ex_answer]);
	    	}
		}
		format(info, sizeof(info), "%d. %s", questions+1, PDD_Exam[article][ex_question]);
		MenuOperation[playerid] = 61 + questions;//61+(0-10)
		ShowPlayerDialogGap(playerid, EXAM_DIALOG, DIALOG_STYLE_LIST, info,listitems, "OK", "Cancel");
	}
	//ИНФОРМИРОВАНИЕ
	//////new strings[MAX_STRING];
	//format(strings, sizeof(strings), "t2-t1: %d, t3-t2: %d", t2-t1, t3-t2);
	//ABroadCast(COLOR_MAROON, strings, 9);
	//SendClientMessageToAll(COLOR_YELLOW, strings);
	return 1;
}
//для школы вождения конец


//stock exam_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
stock school3_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
		//#pragma unused listitem
		#pragma unused inputtext
		if(dialogid != EXAM_DIALOG) return 1;
		SetPVarInt(playerid, "gShowDialog", -1);
		if(!response)
		{
			MenuOperation[playerid] = 0;
		 	return 1;
		}
		new msgitem[256+1];
		//new giveplayerid;
//ShowPlayerDialogEx(playerid, EXAM_DIALOG, DIALOG_STYLE_MSGBOX, "Экзаменатор:", dlgitem, "YES", "NO");
		if(MenuOperation[playerid] == 60)
		{	//для школы вождения начало STEP3
			new recovery = DutyFiveMinuts*PlayerInfo[playerid][pLevel]*8;
	        if(GetPlayerMoneyH(playerid) < recovery && PlayerInfo[playerid][pLevel] > 1)
		    {
				format(msgitem, sizeof(msgitem), "   У вас нет $%d наличных !", recovery);
				SendClientMessage(playerid, COLOR_GREY, msgitem);
			    return 1;
			}
			if(PlayerInfo[playerid][pLevel] > 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Экзаменатор: Деньги за сдачу экзамена сняты! При смерти экзамен провален!");
				GivePlayerMoneyH(ffamily+DoE, playerid, -recovery);//для экономики
				//new family = PlayerInfo[Offer[playerid]][pMember];
				FamilyInfo[DoE][fBank] += recovery;
			}
			IncorrectCounter[playerid] = 0;
			//--------------------------------------------------------------
			//составляем список случайных неодинаковых 10 вопросов
			new index;
			while(index < 10)
			{   //пока не заполнятся все ячейки
			    list_questions[playerid][index] = random(MAX_QUESTIONS)+1;//random(0-36)
			    new Found;
			    //проверяемя не совпало ли это значение с присутсвующими
				//for(new i=0; i<10; i++)
				for(new i=0; i<index; i++)
				{   //пробегаем по всем ячейкам
					if( (list_questions[playerid][index] == list_questions[playerid][i] && i != index)//если совпали
						|| list_questions[playerid][index] < 1
						|| list_questions[playerid][index] > MAX_QUESTIONS)// && index != i
					{
						Found = 1; break;
						//если есть такое же, то выйти из цыкла и повторить с тем же
						//list_questions[playerid][index] = random(MAX_QUESTIONS)+1;
					}
				}
				if(!Found) index ++;
			}
			//--------------------------------------------------------------
			//создаем список ответов
			OnPlayerPDDExam(playerid, listitem, 0);
		}
		else if(MenuOperation[playerid] == 61)
		{
		 	OnPlayerPDDExam(playerid, listitem, 1);
		}
		else if(MenuOperation[playerid] == 62)
		{
			OnPlayerPDDExam(playerid, listitem, 2);
		}
		else if(MenuOperation[playerid] == 63)
		{
			OnPlayerPDDExam(playerid, listitem, 3);
		}
		else if(MenuOperation[playerid] == 64)
		{
			OnPlayerPDDExam(playerid, listitem, 4);
		}
		else if(MenuOperation[playerid] == 65)
		{
			OnPlayerPDDExam(playerid, listitem, 5);
		}
		else if(MenuOperation[playerid] == 66)
		{
			OnPlayerPDDExam(playerid, listitem, 6);
		}
		else if(MenuOperation[playerid] == 67)
		{
			OnPlayerPDDExam(playerid, listitem, 7);
		}
		else if(MenuOperation[playerid] == 68)
		{
			OnPlayerPDDExam(playerid, listitem, 8);
		}
		else if(MenuOperation[playerid] == 69)
		{
			OnPlayerPDDExam(playerid, listitem, 9);
		}
		else if(MenuOperation[playerid] == 70)
		{
			OnPlayerPDDExam(playerid, listitem, 10);
		}
		return 1;
}


//stock PlayerRemoveLic(playerid)
stock school_FiveMinutsTimer(playerid)
{   //вызывается из player_OnFiveMinutsTimer//OnPayDay5Timer

	//для отбора лицензий
	if(PlayerInfo[playerid][pCarLic] >= 10 && PlayerInfo[playerid][pCarLic] < 999)
	{   //отнимаем по еденице раз в ЧАС от значения pCarLic
	    if(PlayerInfo[playerid][pCarLic] <= 10) PlayerInfo[playerid][pCarLic] = 0;//остановить счётчик
	    else PlayerInfo[playerid][pCarLic] -= 2;//иначе счётчик секунд работает
	}
	if(PlayerInfo[playerid][pBikeLic] >= 10 && PlayerInfo[playerid][pBikeLic] < 999)
	{
	    if(PlayerInfo[playerid][pBikeLic] <= 10) PlayerInfo[playerid][pBikeLic] = 0;
	    else PlayerInfo[playerid][pBikeLic] -= 2;
	}
	if(PlayerInfo[playerid][pFlyLic] >= 10 && PlayerInfo[playerid][pFlyLic] < 999)
	{
	    if(PlayerInfo[playerid][pFlyLic] <= 10) PlayerInfo[playerid][pFlyLic] = 0;
	    else PlayerInfo[playerid][pFlyLic] -= 2;
	}
	if(PlayerInfo[playerid][pBoatLic] >= 10 && PlayerInfo[playerid][pBoatLic] < 999)
	{
	    if(PlayerInfo[playerid][pBoatLic] <= 10) PlayerInfo[playerid][pBoatLic] = 0;
	    else PlayerInfo[playerid][pBoatLic] -= 2;
	}
	if(PlayerInfo[playerid][pGunLic] >= 10 && PlayerInfo[playerid][pGunLic] < 999)
	{
	    if(PlayerInfo[playerid][pGunLic] <= 10) PlayerInfo[playerid][pGunLic] = 0;
	    else PlayerInfo[playerid][pGunLic] -= 2;
	}
}
